package com.gvt.main.hibernate.model;
// Generated 29-oct-2020 13:48:51 by Hibernate Tools 3.2.2.GA and Assent Architecture


import com.fasterxml.jackson.annotation.JsonIgnore;
import com.gvt.core.domain.types.Auditable;
import com.gvt.core.domain.types.Cleanable;
import com.gvt.core.domain.types.Fillable;
import com.gvt.core.domain.types.Identificable;
import com.gvt.core.domain.types.Seleccionable;
import com.gvt.core.domain.types.Versionable;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityListeners;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.persistence.Version;
import javax.xml.bind.annotation.XmlTransient;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;
import org.springframework.data.annotation.CreatedBy;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedBy;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;

/**
 * ParteDiente generated by hbm2java
 */
@Entity
@EntityListeners({ AuditingEntityListener.class })
@Table(name="parte_diente"
    ,schema="public"
    , uniqueConstraints = @UniqueConstraint(columnNames={"numero_parte", "id_diente"}) 
)
public class ParteDiente  implements Versionable,Seleccionable,Identificable,Fillable,Cleanable,Auditable,java.io.Serializable {


 	
 	private Long id;
 	
 	private long version;
 	
 	private Patologia patologiaByIdPatologia10;
 	
 	private Patologia patologiaByIdPatologia1;
 	
 	private Patologia patologiaByIdPatologia3;
 	
 	private Patologia patologiaByIdPatologia2;
 	
 	private Patologia patologiaByIdPatologia5;
 	
 	private Patologia patologiaByIdPatologia4;
 	
 	private Patologia patologiaByIdPatologia7;
 	
 	private Patologia patologiaByIdPatologia6;
 	
 	private Diente diente;
 	
 	private Patologia patologiaByIdPatologia9;
 	
 	private Patologia patologiaByIdPatologia8;
 	
 	private short numeroParte;
 	
 	private String observaciones;
 	@CreatedBy
 	private String usuarioCreacion;
 	@CreatedDate
 	private LocalDateTime fechaCreacion;
 	@LastModifiedBy
 	private String usuarioModificacion;
 	@LastModifiedDate
 	private LocalDateTime fechaModificacion;

    public ParteDiente() {
    	// default constructor
    }

	
    public ParteDiente(Diente diente, short numeroParte) {
        this.diente = diente;
        this.numeroParte = numeroParte;
    }
    public ParteDiente(Patologia patologiaByIdPatologia10, Patologia patologiaByIdPatologia1, Patologia patologiaByIdPatologia3, Patologia patologiaByIdPatologia2, Patologia patologiaByIdPatologia5, Patologia patologiaByIdPatologia4, Patologia patologiaByIdPatologia7, Patologia patologiaByIdPatologia6, Diente diente, Patologia patologiaByIdPatologia9, Patologia patologiaByIdPatologia8, short numeroParte, String observaciones, String usuarioCreacion, LocalDateTime fechaCreacion, String usuarioModificacion, LocalDateTime fechaModificacion) {
       this.patologiaByIdPatologia10 = patologiaByIdPatologia10;
       this.patologiaByIdPatologia1 = patologiaByIdPatologia1;
       this.patologiaByIdPatologia3 = patologiaByIdPatologia3;
       this.patologiaByIdPatologia2 = patologiaByIdPatologia2;
       this.patologiaByIdPatologia5 = patologiaByIdPatologia5;
       this.patologiaByIdPatologia4 = patologiaByIdPatologia4;
       this.patologiaByIdPatologia7 = patologiaByIdPatologia7;
       this.patologiaByIdPatologia6 = patologiaByIdPatologia6;
       this.diente = diente;
       this.patologiaByIdPatologia9 = patologiaByIdPatologia9;
       this.patologiaByIdPatologia8 = patologiaByIdPatologia8;
       this.numeroParte = numeroParte;
       this.observaciones = observaciones;
       this.usuarioCreacion = usuarioCreacion;
       this.fechaCreacion = fechaCreacion;
       this.usuarioModificacion = usuarioModificacion;
       this.fechaModificacion = fechaModificacion;
    }
   
  @GenericGenerator(name = "parte_diente_seq_gen", strategy = "org.hibernate.id.enhanced.SequenceStyleGenerator",
            parameters = {
                    @Parameter(name = "sequence_name", value = "parte_diente_id_seq"),
                    @Parameter(name = "initial_value", value = "1"),
                    @Parameter(name = "increment_size", value = "1")
            })
  @GeneratedValue(generator = "parte_diente_seq_gen")
  @Id
    
    @Column(name="id", unique=true, nullable=false)
    public Long getId() {
        return this.id;
    }
    
    public void setId(Long id) {
        this.id = id;
    }
    @Version
    @Column(name="version", nullable=false)
    public long getVersion() {
        return this.version;
    }
    
    public void setVersion(long version) {
        this.version = version;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="id_patologia_10")
    public Patologia getPatologiaByIdPatologia10() {
        return this.patologiaByIdPatologia10;
    }
    
    public void setPatologiaByIdPatologia10(Patologia patologiaByIdPatologia10) {
        this.patologiaByIdPatologia10 = patologiaByIdPatologia10;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="id_patologia_1")
    public Patologia getPatologiaByIdPatologia1() {
        return this.patologiaByIdPatologia1;
    }
    
    public void setPatologiaByIdPatologia1(Patologia patologiaByIdPatologia1) {
        this.patologiaByIdPatologia1 = patologiaByIdPatologia1;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="id_patologia_3")
    public Patologia getPatologiaByIdPatologia3() {
        return this.patologiaByIdPatologia3;
    }
    
    public void setPatologiaByIdPatologia3(Patologia patologiaByIdPatologia3) {
        this.patologiaByIdPatologia3 = patologiaByIdPatologia3;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="id_patologia_2")
    public Patologia getPatologiaByIdPatologia2() {
        return this.patologiaByIdPatologia2;
    }
    
    public void setPatologiaByIdPatologia2(Patologia patologiaByIdPatologia2) {
        this.patologiaByIdPatologia2 = patologiaByIdPatologia2;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="id_patologia_5")
    public Patologia getPatologiaByIdPatologia5() {
        return this.patologiaByIdPatologia5;
    }
    
    public void setPatologiaByIdPatologia5(Patologia patologiaByIdPatologia5) {
        this.patologiaByIdPatologia5 = patologiaByIdPatologia5;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="id_patologia_4")
    public Patologia getPatologiaByIdPatologia4() {
        return this.patologiaByIdPatologia4;
    }
    
    public void setPatologiaByIdPatologia4(Patologia patologiaByIdPatologia4) {
        this.patologiaByIdPatologia4 = patologiaByIdPatologia4;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="id_patologia_7")
    public Patologia getPatologiaByIdPatologia7() {
        return this.patologiaByIdPatologia7;
    }
    
    public void setPatologiaByIdPatologia7(Patologia patologiaByIdPatologia7) {
        this.patologiaByIdPatologia7 = patologiaByIdPatologia7;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="id_patologia_6")
    public Patologia getPatologiaByIdPatologia6() {
        return this.patologiaByIdPatologia6;
    }
    
    public void setPatologiaByIdPatologia6(Patologia patologiaByIdPatologia6) {
        this.patologiaByIdPatologia6 = patologiaByIdPatologia6;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="id_diente", nullable=false)
    public Diente getDiente() {
        return this.diente;
    }
    
    public void setDiente(Diente diente) {
        this.diente = diente;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="id_patologia_9")
    public Patologia getPatologiaByIdPatologia9() {
        return this.patologiaByIdPatologia9;
    }
    
    public void setPatologiaByIdPatologia9(Patologia patologiaByIdPatologia9) {
        this.patologiaByIdPatologia9 = patologiaByIdPatologia9;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="id_patologia_8")
    public Patologia getPatologiaByIdPatologia8() {
        return this.patologiaByIdPatologia8;
    }
    
    public void setPatologiaByIdPatologia8(Patologia patologiaByIdPatologia8) {
        this.patologiaByIdPatologia8 = patologiaByIdPatologia8;
    }
    
    @Column(name="numero_parte", nullable=false)
    public short getNumeroParte() {
        return this.numeroParte;
    }
    
    public void setNumeroParte(short numeroParte) {
        this.numeroParte = numeroParte;
    }
    
    @Column(name="observaciones")
    public String getObservaciones() {
        return this.observaciones;
    }
    
    public void setObservaciones(String observaciones) {
        this.observaciones = observaciones;
    }
    
    @Column(name="usuario_creacion", length=64)
    public String getUsuarioCreacion() {
        return this.usuarioCreacion;
    }
    
    public void setUsuarioCreacion(String usuarioCreacion) {
        this.usuarioCreacion = usuarioCreacion;
    }
    
    @Column(name="fecha_creacion", length=29)
    public LocalDateTime getFechaCreacion() {
        return this.fechaCreacion;
    }
    
    public void setFechaCreacion(LocalDateTime fechaCreacion) {
        this.fechaCreacion = fechaCreacion;
    }
    
    @Column(name="usuario_modificacion", length=64)
    public String getUsuarioModificacion() {
        return this.usuarioModificacion;
    }
    
    public void setUsuarioModificacion(String usuarioModificacion) {
        this.usuarioModificacion = usuarioModificacion;
    }
    
    @Column(name="fecha_modificacion", length=29)
    public LocalDateTime getFechaModificacion() {
        return this.fechaModificacion;
    }
    
    public void setFechaModificacion(LocalDateTime fechaModificacion) {
        this.fechaModificacion = fechaModificacion;
    }

    /**
     * toString
     * @return String
     */
     @Override
     public String toString() {
	  StringBuilder buffer = new StringBuilder();

      buffer.append(getClass().getName()).append("@").append(Integer.toHexString(hashCode())).append(" [");
      buffer.append("id").append("='").append(getId()).append("' ");			
      buffer.append("version").append("='").append(getVersion()).append("' ");			
      buffer.append("patologiaByIdPatologia10").append("='").append(getPatologiaByIdPatologia10()).append("' ");			
      buffer.append("patologiaByIdPatologia1").append("='").append(getPatologiaByIdPatologia1()).append("' ");			
      buffer.append("patologiaByIdPatologia3").append("='").append(getPatologiaByIdPatologia3()).append("' ");			
      buffer.append("patologiaByIdPatologia2").append("='").append(getPatologiaByIdPatologia2()).append("' ");			
      buffer.append("patologiaByIdPatologia5").append("='").append(getPatologiaByIdPatologia5()).append("' ");			
      buffer.append("patologiaByIdPatologia4").append("='").append(getPatologiaByIdPatologia4()).append("' ");			
      buffer.append("patologiaByIdPatologia7").append("='").append(getPatologiaByIdPatologia7()).append("' ");			
      buffer.append("patologiaByIdPatologia6").append("='").append(getPatologiaByIdPatologia6()).append("' ");			
      buffer.append("diente").append("='").append(getDiente()).append("' ");			
      buffer.append("patologiaByIdPatologia9").append("='").append(getPatologiaByIdPatologia9()).append("' ");			
      buffer.append("patologiaByIdPatologia8").append("='").append(getPatologiaByIdPatologia8()).append("' ");			
      buffer.append("numeroParte").append("='").append(getNumeroParte()).append("' ");			
      buffer.append("observaciones").append("='").append(getObservaciones()).append("' ");			
      buffer.append("usuarioCreacion").append("='").append(getUsuarioCreacion()).append("' ");			
      buffer.append("fechaCreacion").append("='").append(getFechaCreacion()).append("' ");			
      buffer.append("usuarioModificacion").append("='").append(getUsuarioModificacion()).append("' ");			
      buffer.append("fechaModificacion").append("='").append(getFechaModificacion()).append("' ");			
      buffer.append("]");
      
      return buffer.toString();
     }

	@Override
	public boolean equals(Object other) {
         if (this == other) 
         	return true;
         	
		 if (other == null) 
		 	return false;
		 	
		 if (!(other instanceof ParteDiente)) 
		 	return false;
		 	
		 ParteDiente castOther = ( ParteDiente ) other; 
         
		 return ( (this.getId()==castOther.getId()) || ( this.getId()!=null && castOther.getId()!=null && this.getId().equals(castOther.getId()) ) )
 && (this.getVersion()==castOther.getVersion());
   }
   
   @Override
   public int hashCode() {
         int result = 17;
         
         result = 37 * result + ( getId() == null ? 0 : this.getId().hashCode() );
         result = 37 * result + (int) this.getVersion();
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         return result;
   }   

  // The following is extra code specified in src/main/config/templates
// Adding extra-code
	private boolean comesFromExternalDataSource = false;
	private boolean selected;
	
	@javax.persistence.Transient
    public boolean isExternalDataSource() {
		return this.comesFromExternalDataSource;
    }

    public void setExternalDataSource(boolean value) {
        this.comesFromExternalDataSource = value;
    }

	@javax.persistence.Transient
	public boolean getSelected() {
		return selected;
	}

    public void setSelected(boolean selected) {
		this.selected = selected;
    }
    
    public void cleanPOJO() {
		if(this.patologiaByIdPatologia10 != null &&
			(patologiaByIdPatologia10.getId() == null || this.patologiaByIdPatologia10.getId().longValue() == 0)) {
			patologiaByIdPatologia10 = null;
		}
		if(this.patologiaByIdPatologia1 != null &&
			(patologiaByIdPatologia1.getId() == null || this.patologiaByIdPatologia1.getId().longValue() == 0)) {
			patologiaByIdPatologia1 = null;
		}
		if(this.patologiaByIdPatologia3 != null &&
			(patologiaByIdPatologia3.getId() == null || this.patologiaByIdPatologia3.getId().longValue() == 0)) {
			patologiaByIdPatologia3 = null;
		}
		if(this.patologiaByIdPatologia2 != null &&
			(patologiaByIdPatologia2.getId() == null || this.patologiaByIdPatologia2.getId().longValue() == 0)) {
			patologiaByIdPatologia2 = null;
		}
		if(this.patologiaByIdPatologia5 != null &&
			(patologiaByIdPatologia5.getId() == null || this.patologiaByIdPatologia5.getId().longValue() == 0)) {
			patologiaByIdPatologia5 = null;
		}
		if(this.patologiaByIdPatologia4 != null &&
			(patologiaByIdPatologia4.getId() == null || this.patologiaByIdPatologia4.getId().longValue() == 0)) {
			patologiaByIdPatologia4 = null;
		}
		if(this.patologiaByIdPatologia7 != null &&
			(patologiaByIdPatologia7.getId() == null || this.patologiaByIdPatologia7.getId().longValue() == 0)) {
			patologiaByIdPatologia7 = null;
		}
		if(this.patologiaByIdPatologia6 != null &&
			(patologiaByIdPatologia6.getId() == null || this.patologiaByIdPatologia6.getId().longValue() == 0)) {
			patologiaByIdPatologia6 = null;
		}
		if(this.diente != null &&
			(diente.getId() == null || this.diente.getId().longValue() == 0)) {
			diente = null;
		}
		if(this.patologiaByIdPatologia9 != null &&
			(patologiaByIdPatologia9.getId() == null || this.patologiaByIdPatologia9.getId().longValue() == 0)) {
			patologiaByIdPatologia9 = null;
		}
		if(this.patologiaByIdPatologia8 != null &&
			(patologiaByIdPatologia8.getId() == null || this.patologiaByIdPatologia8.getId().longValue() == 0)) {
			patologiaByIdPatologia8 = null;
		}
    }
    
    public void fillPOJO() {
		if(this.patologiaByIdPatologia10 == null) {
			patologiaByIdPatologia10 = new Patologia();
		}
		if(this.patologiaByIdPatologia1 == null) {
			patologiaByIdPatologia1 = new Patologia();
		}
		if(this.patologiaByIdPatologia3 == null) {
			patologiaByIdPatologia3 = new Patologia();
		}
		if(this.patologiaByIdPatologia2 == null) {
			patologiaByIdPatologia2 = new Patologia();
		}
		if(this.patologiaByIdPatologia5 == null) {
			patologiaByIdPatologia5 = new Patologia();
		}
		if(this.patologiaByIdPatologia4 == null) {
			patologiaByIdPatologia4 = new Patologia();
		}
		if(this.patologiaByIdPatologia7 == null) {
			patologiaByIdPatologia7 = new Patologia();
		}
		if(this.patologiaByIdPatologia6 == null) {
			patologiaByIdPatologia6 = new Patologia();
		}
		if(this.diente == null) {
			diente = new Diente();
		}
		if(this.patologiaByIdPatologia9 == null) {
			patologiaByIdPatologia9 = new Patologia();
		}
		if(this.patologiaByIdPatologia8 == null) {
			patologiaByIdPatologia8 = new Patologia();
		}
    }
    
    public ParteDiente createPOJO() {
		fillPOJO();
		
		return this;
	}
	
//	@PrePersist
//	public void onPrePersist() {
//		this.fechaCreacion = new Date();
//		this.usuarioCreacion = getSecurityContextPrincipal();
//	}
//
//	@PreUpdate
//	public void onPreUpdate() {
//		this.fechaModificacion = new Date();
//		this.usuarioModificacion = getSecurityContextPrincipal();
//	}
//
//	@javax.persistence.Transient
//	private String getSecurityContextPrincipal() {
//		String principal;
//		String UNKNOWN_USER = "unknownUser";
//
//		if (SecurityContextHolder.getContext().getAuthentication() == null) {
//			principal = UNKNOWN_USER;
//		} else {
//			try {
//				principal = ((User) SecurityContextHolder.getContext().getAuthentication().getPrincipal())
//						.getUsername();
//			} catch (ClassCastException e) {
//				principal = UNKNOWN_USER;
//			}
//		}
//
//		return principal;
//	}
	
  // end of extra code specified in the hbm.xml files

}

